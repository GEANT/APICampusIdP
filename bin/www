#!/usr/bin/env node

/**
 * Module dependencies.
 */
const fs = require('fs');
const path = require('path');
const configer = require('../libs/serviceConfig');
const app = require('../app');
const debug = require('debug')('idpapi:server');
const http = require('http');
const https = require('https');




const hostname = configer.get("hostname");
if (hostname === undefined) {
    throw "hostname  is not defined in the config";
}
let baseurl;
const useHttps = configer.get("forcehttps") || false;
const httpsPort = normalizePort(configer.get("https:port"));
let pubKey = configer.get("https:cert");
let privateKey = configer.get("https:key");
let ca = configer.get("https:ca");
let server;
let finalPort;
if (useHttps) {
    if (httpsPort === null) {
        throw "https port ( https.port) is not defined in the config";
    }
    if (pubKey === undefined || privateKey === undefined) {
        throw "public or/and private key ( https.cert , https.key) is not defined in the config";
    }
    if (!path.isAbsolute(pubKey)) {
        pubKey = path.join(__dirname, '../etc', pubKey);
    }
    if (!path.isAbsolute(privateKey)) {
        privateKey = path.join(__dirname, '../etc', privateKey);
    }
    if (!fs.existsSync(pubKey) || !fs.existsSync(privateKey)) {
        throw "cannot open/find or/and private key  files ( https.cert , https.key)";
    }
    let httpsOptions = {
        key: fs.readFileSync(privateKey),
        cert: fs.readFileSync(pubKey)
    };
    if (ca !== undefined) {
        if (!path.isAbsolute(ca)) {
            ca = path.join(__dirname, '../etc', ca);
        }
        if (!fs.existsSync(ca)) {
            throw "cannot open/find CA file  defined in config ( https.ca)";
        }
        httpsOptions.ca = fs.readFileSync(ca);
    }
    if (httpsPort !== 443) {
        app.set('baseurl', 'https://' + hostname + ':' + httpsPort + '/');
    }
    else {
        app.set('baseurl', 'https://' + hostname + '/');
    }


    app.set('port', httpsPort);
    finalPort = httpsPort;
    server = https.createServer(httpsOptions, app);

    console.log('starting to listen (HTTPS) on port: ' + app.get('port'));
    console.log('base url : ' + app.get('baseurl'));
}
else {

    const port = normalizePort(configer.get("http:port"));

    app.set('port', port);
    finalPort = port;
    server = http.createServer(app);
    console.log('starting to listen (HTTP) on port: ' + app.get('port'));
    console.log('base url : ' + app.get('baseurl'));
}
server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);
    if (port > 0) {
        return port;
    }
    return null;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {

    if (error.syscall !== 'listen') {
        throw error;
    }


    var bind = typeof port === 'string'
        ? 'Pipe ' + finalPort
        : 'Port ' + finalPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
